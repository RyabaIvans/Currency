import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import {CourseApi, ResponseCourse} from "../Card/cardApi";
import {AppState} from "../../store";



const initialState = {
    data:<ResponseCourse>[]
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const addCourse = createAsyncThunk(
    'courses/add',
    async () => {
        const response = await CourseApi.course()
        // The value we return becomes the `fulfilled` action payload
        return response.data
    }
)

export const BankData = createSlice({
    name: 'courses',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        addData: (state) => {

        },
        },
    extraReducers: builder => {
        builder
            .addCase(addCourse.fulfilled, (state, action) => {
               state.data = action.payload
            })
    }
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.

})




export const dataThunks = { addCourse };

export const data = (state : AppState) => state.newreducer.data

export default BankData.reducer;